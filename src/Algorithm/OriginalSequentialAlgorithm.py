from src.Algorithm.AbstractAlgorithm import AbstractAlgorithm

"""
This algorithm was introduced by Brams et al. (2015) under the name Sequential Algorithm (SA).
Since [in the paper they] also consider a modified version of that algorithm in [their] study,
[they] here refer to it as the “Original SA” algorithm, or OS for short. It generates allocations
that are Pareto-optimal and envy-free, provided an envy-free allocation exists. But allocations
generated by OS are not guaranteed to satisfy the max-min property.

In addition to the partial allocations and the set of unallocated items,
the recursive procedure for this algorithm has a third parameter l,
the maximum rank of items currently considered for allocation.
In the top level invocation of the procedure,l=1 .
"""


class OriginalSequentialAlgorithm(AbstractAlgorithm):

    def _compute(self, sequence):
        # On considère chaque agent en suivant la séquence

        if len(self.problem.get_unallocated_items()) == 0:
            self.status = self.Status.SUCCEEDED
            print("Success because U was empty at the end")
        else:
            print("Not empty")
        return
